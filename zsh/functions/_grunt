#compdef grunt
# -----------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for grunt
#   (https://github.com/gruntjs/grunt)
#   (https://github.com/gruntjs/grunt-cli)
#
# -----------------------------------------------------------------------------
# Authors
# -------
#
#  * Yonchu <https://github.com/yonchu>
#
# -----------------------------------------------------------------------------
# USAGE
# -----
#
# Enable caching:
#
#   If you want to use the cache, set the followings in your .zshrc:
#
#     zstyle ':completion:*' use-cache yes
#
#
# Settings:
#
#  - Show grunt file path:
#      zstyle ':completion::complete:grunt::options:' show_grunt_path yes
#
#  - Cache expiration days (default: 7):
#      zstyle ':completion::complete:grunt::options:' expire 1
#
#
#  Note that if you change the zstyle settings,
#  you should delete the cache file and restart zsh.
#
#    $ rm ~/.zcompcache/grunt
#    $ exec zsh
#
# -----------------------------------------------------------------------------

function _grunt() {
    local curcontext="$curcontext" update_policy state
    local show_grunt_path update_msg gruntfile

    # Setup cache-policy.
    zstyle -s ":completion:${curcontext}:" cache-policy update_policy
    if [[ -z $update_policy ]]; then
        zstyle ":completion:${curcontext}:" cache-policy __grunt_caching_policy
    fi

    # Check show_path option.
    zstyle -b ":completion:${curcontext}:options:" show_grunt_path show_grunt_path

    # No updatint the cache when complete a option.
    if [[ $PREFIX == ${PREFIX#-} ]]; then
        # Get current gruntfile.
        gruntfile=$(__grunt_get_gruntfile)

        # Retrieve cache.
        #   The cache file name: grunt
        #   The cache variable name: __grunt_gruntfile, __grunt_tasks
        if [[ -f $gruntfile ]]; then
            if ! __grunt_update_cache "$gruntfile"; then
                update_msg=' (cache updated)'
            fi
        fi
    fi

    _arguments \
    '(- 1 *)'{-h,--help}'[help]' \
    '(--version,-V)'{--version,-V}'[Print the grunt version. Combine with --verbose for more info.]' \
    '(--base)--base[Specify an alternate base path. By default, all file paths are relative to the Gruntfile. (grunt.file.setBase) *]' \
    '(--no-color)--no-color[Disable colored output.]' \
    '(--gruntfile)--gruntfile[Specify an alternate Gruntfile. By default, grunt looks in the current or parent directories for the nearest Gruntfile.js or Gruntfile.coffee file.]' \
    '(--stack)--stack[Print a stack trace when exiting with a warning or fatal error.]' \
    '(--force,-f)'{--force,-f}"[A way to force your way past warnings. Want a suggestion? Don't use this option, fix your code.]" \
    '(--tasks)--tasks[Additional directory paths to scan for task and "extra" files. (grunt.loadTasks) *]' \
    '(--npm)--npm[Npm-installed grunt plugins to scan for task and "extra" files. (grunt.loadNpmTasks) *]' \
    '(--no-write)--no-write[Disable writing files (dry run).]' \
    '(--verbose,-v)'{--verbose,-v}'[Verbose mode. A lot more information output.]' \
    '(--completion)--completion[Output shell auto-completion rules. See the grunt-cli documentation for more information.]' \
    '*: :->tasks' \
    && return

    case $state in
        tasks)
            if [[ -f $gruntfile ]]; then
                if [[ $show_grunt_path == 'yes' ]]; then
                    update_msg="$update_msg: ${${gruntfile/#$HOME/~}%/}"
                fi
                _describe -t grunt-task "$verbose grunt task$update_msg" __grunt_tasks || return 1
            fi
        ;;
    esac

    return 0
}

# Cache policy:
#   The cache file name: grunt
#   The cache variable name: __grunt_gruntfile, __grunt_tasks
function __grunt_update_cache() {
    local is_updating=0
    local gruntfile="$1"

    if ( [[ ${+__grunt_gruntfile} -eq 0 ]] \
        || [[ ${+__grunt_tasks} -eq 0 ]] ) \
        && ! _retrieve_cache 'grunt'; then
        is_updating=1
    fi

    if _cache_invalid 'grunt'; then
        is_updating=1
    fi

    if [[ $gruntfile != $__grunt_gruntfile ]]; then
        is_updating=1
    fi

    __grunt_gruntfile=$gruntfile

    if [[ $is_updating -ne 0 ]]; then
        is_updating=1
        __grunt_tasks=(${(f)"$(__grunt_get_tasks "$__grunt_gruntfile")"})
        _store_cache 'grunt' __grunt_gruntfile __grunt_tasks
    fi
    return $is_updating
}

function __grunt_get_tasks() {
    grunt --help --no-color --gruntfile "$1" 2>/dev/null \
        | grep 'Available tasks' -A 100 \
        | grep '^ ' \
        | grep -v '.*--' \
        | sed -e 's/^[[:blank:]]*//' -e 's/[[:blank:]]*$//' \
        | sed -e 's/  /:/'
}

function __grunt_get_gruntfile() {
    local gruntfile
    local curpath="$PWD"
    while [ "$curpath" ]; do
        for gruntfile in "$curpath/"{G,g}runtfile.{js,coffee}; do
            if [[ -e "$gruntfile" ]]; then
                echo "$gruntfile"
                return
            fi
        done
        curpath="${curpath%/*}"
    done
    return 1
}

function __grunt_caching_policy() {
    # Returns status zero if the completions cache needs rebuilding.

    # Rebuild if .agignore more recent than cache.
    if [[ -f $__grunt_gruntfile && $__grunt_gruntfile -nt $1 ]]; then
        return 0
    fi

    local -a oldp
    local expire
    zstyle -s ":completion:${curcontext}:options:" expire expire
    if [[ -z $expire ]]; then
        expire=7
    fi
    # Rebuild if cache is more than $expire days.
    oldp=( "$1"(Nm+$expire) )
    (( $#oldp ))
}

_grunt "$@"

let g:polyglot_disabled = ['vue']

" ----------------------------------------------------------------------------
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
" ----------------------------------------------------------------------------
set nocompatible

" ----------------------------------------------------------------------------
"  Vundle configuration
" ----------------------------------------------------------------------------
call plug#begin('~/.vim/plugins')
source ~/.dotfiles/vim/plugins
call plug#end()

delc PlugUpgrade

" Strip whitespace on save
"autocmd BufWritePre * :%s/\s\+$//e


" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set background=dark
set t_Co=256
syntax on
colorscheme molokai


set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
set lazyredraw             " turn off lazy redraw
set number                 " line numbers
set relativenumber         " Show relative numbers in col
set wildmenu               " turn on wild menu
set wildmode=longest:full,full
set wildmode=full
if has('nvim-0.4')
  set wildoptions=pum
endif
set cmdheight=1            " command line height
set backspace=2            " allow backspacing over everything in insert mode
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
set guicursor=i-c-r-v:ver30-iCursor-blinkwait300-blinkon200-blinkoff150   " disable blinking cursor
au VimLeave * set guicursor=a:ver25 " Reset cursor to default | vertical beamer
set nowrap
set display=lastline	     " prevent the @ when lines are too long
set tabstop=2			         " Tabs width
set smartindent
set shiftwidth=2
set expandtab
set synmaxcol=0
set splitbelow				    " Open splits below
set splitright				    " Open splits on the right
set nofoldenable			    " Disable automatic fold
set hidden                " Can change buffer without save everytime
set autoindent            " Indent on new line
set synmaxcol=350         " Highlight max 350 char on line
set updatetime=300        " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable delays and poor user experience.

augroup qf
  autocmd!
  autocmd FileType qf set nobuflisted nonumber norelativenumber 
  autocmd FileType vundle set nobuflisted
augroup END

" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set hlsearch               " don't highlight searches
set visualbell             " shut the fuck up
set cursorline				     " highlight current line
set noshowmode             " Hide the default mode text (e.g. -- INSERT -- below the statusline)

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬
set fillchars+=vert:│

" --
"  Find
"  --
set path=.,/usr/include,src,node_nodules
"set inex=substitute(v:fname,'^\\@','src','')
set suffixesadd=.js,.jsx,.ts,.tsx,.vue,.php

set includeexpr=substitute(v:fname,'^@\/','src/','')
set isfname+=@-@

" ----------------------------------------------------------------------------
" Mappings
" ----------------------------------------------------------------------------

" Configure <Leader>
let mapleader = ","

" Escape is too far away
inoremap jj <Esc>
inoremap jk <Esc>
inoremap kj <Esc>
inoremap kk <Esc>

" Remap down/up for wrapping lines
nnoremap j gj
nnoremap k gk
xnoremap j gj
xnoremap k gk

" Learn "hkjl" the hard way !
nnoremap <Up>       <nop>
nnoremap <Down>     <nop>
nnoremap <silent>   <Left>  :bprevious<CR>
nnoremap <silent>   <Right> :bnext<CR>
inoremap <Up>       <nop>
inoremap <Down>     <nop>
inoremap <Left>     <Esc>:bprevious<CR>
inoremap <Right>    <Esc>:bnext<CR>

nnoremap È :m .-2<CR>==
nnoremap Ï :m .+1<CR>==
inoremap È <Esc>:m .+1<CR>==gi
inoremap Ï  <Esc>:m .-2<CR>==gi
vnoremap È :m '<-2<CR>gv=gv
vnoremap Ï :m '>+1<CR>gv=gv

function! MapF1()
  if &buftype == "help"
    exec 'quit'
  else
    exec 'help'
  endif
endfunction

" Disabling <F1> because it's so close to <Esc>
inoremap <F1> <Esc>
inoremap <F2> <nop>
inoremap <F3> <nop>
inoremap <F4> <nop>
inoremap <F5> <nop>
inoremap <F6> <nop>
inoremap <F7> <nop>
inoremap <F8> <nop>
inoremap <F9> <nop>
inoremap <F10> <nop>
inoremap <F11> <nop>
inoremap <F12> <nop>
inoremap <F13> <nop>
inoremap <F14> <nop>
inoremap <F15> <nop>
noremap <F1> :call MapF1()<CR>

" Source vim config
nmap <F5> :so ~/.vimrc<CR>

" Toggle paste mode
set pastetoggle=<F12>
nmap <silent> <F12> :set paste!<BAR>:set paste?<CR>

" Search and replace word under cursor
nmap <leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

" Easy create empty line
nmap <leader>o o<esc>
nmap <leader>O O<esc>

" Easy insert
"nmap <leader>a ea
nmap <leader>i bi

" empty last search highlight
nmap <leader>/ :let @/ = ""<CR>

" toggle search result highlight
nmap <leader>; :set hlsearch!<CR>

" Insert ; at the end of the line if ; inserted then enter pressed
inoremap ;<CR> <C-o>A;

function! s:ToggleGstatus() abort
	for l:winnr in range(1, winnr('$'))
		if !empty(getwinvar(l:winnr, 'fugitive_status'))
			execute l:winnr.'close'
		else
      Git
      20wincmd_ "Resize the git status pane to height of 20
		endif
	endfor
endfunction
command! ToggleGStatus :call ToggleGStatus()
nnoremap <silent> <leader>gg :ToggleGStatus<cr>

augroup fugitive_au
  autocmd!
  autocmd FileType fugitive setlocal winfixheight
augroup END

nmap <F2> :call <SID>ToggleGstatus()<CR>
nmap <F3> :Glog<CR>:bot copen<CR>

nmap <leader>z :Goyo<CR>

" close buffer
nmap <leader>w :Bdelete!<CR>
nmap <leader>< :Bdelete!<CR>
"close all buffers except current one
nmap  <leader>wa :silent :bufdo :Bdelete<CR>
" new buffer
nmap <leader>n :enew<CR>

nmap <Leader>f :GFiles<CR>
nmap <Leader>F :Files<CR>
nmap <Leader>b :Buffers<CR>
nmap <Leader>h :History<CR>

nmap <Leader>a :Rg<CR>
vmap <Leader>/ <Plug>AgRawVisualSelection
nmap <Leader>* <Plug>AgRawWordUnderCursor

command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1, fzf#vim#with_preview({'options': '--delimiter : --nth 4..  --height 50% --border'}), <bang>0)
"command! -bang -nargs=* -complete=file Rg call fzf#vim#grep('rg --files --hidden --follow --smart-case --glob "!.git/*" --glob "!node_modules/*" --glob "!*.png"' . <q-args>, 1, fzf#vim#with_preview(), <bang>0)

" bind K to grep word under cursor

nnoremap K :Rg \b<C-R><C-W>\b<CR>
nnoremap <leader>K :Rg <C-R><C-W><CR>

" ----------------------------------------------------------------------------
" Backups
" ----------------------------------------------------------------------------

set nowb
set noswapfile
" Some servers have issues with backup files, see #649. (coc)
set nobackup
set nowritebackup


" ----------------------------------------------------------------------------
" Terminal
" ----------------------------------------------------------------------------

set mouse=a         		" enable mouse support in console "
set ttyfast					" Send more characters for redraws
" Set this to the name of your terminal that supports mouse codes.
" Must be one of: xterm, xterm2, netterm, dec, jsbterm, pterm
if !has('nvim')
  set ttymouse=xterm2
endif


" ----------------------------------------------------------------------------
" MacVim
" ----------------------------------------------------------------------------

if has("gui_macvim")
  let macvim_hig_shift_movement = 1 "allow selection in insert mode
endif


" ----------------------------------------------------------------------------
" FileType configuration
" ----------------------------------------------------------------------------
au BufNewFile,BufRead *.sass set tabstop=4 shiftwidth=4 expandtab
au BufNewFile,BufRead *.json setfiletype json syntax=javascript
autocmd FileType json syntax match Comment +\/\/.\+$+

au BufRead,BufNewFile /etc/nginx/conf/*                      set ft=nginx
au BufRead,BufNewFile /etc/nginx/sites-available/*           set ft=nginx
au BufRead,BufNewFile /usr/local/etc/nginx/sites-available/* set ft=nginx
au BufRead,BufNewFile vhost.nginx                            set ft=nginx

au BufRead,BufNewFile Vagrantfile							 set ft=ruby

au BufRead,BufNewFile *.mustache							 set ft=html

au BufRead,BufNewFile tmux.conf.symlink                      set ft=tmux

"au BufRead,BufNewFile *.twig                   set ft=jinja

au BufRead,BufNewFile .env*							       set ft=sh

" Force markdown filteype
au BufRead,BufNewFile *.md                     set ft=markdown
au BufRead,BufNewFile *.markdown               set ft=markdown

" ----------------------------------------------------------------------------
" Plugins configuration
" ----------------------------------------------------------------------------

" Emmet
let g:user_emmet_leader_key = '<c-e>'
let g:use_emmet_complete_tag = 1

" NERDTree
let NERDTreeMinimalUI=1
let NERDTreeCaseSensitiveSort=1
let g:NERDTreeMapJumpNextSibling = '<Nop>'
let g:NERDTreeMapJumpPrevSibling = '<Nop>'
let NERDTreeAutoDeleteBuffer=1
nmap <silent> <Leader>d :call g:WorkaroundNERDTreeToggle()<CR> <bar> <C-w>=
nmap <silent> <leader>D  :NERDTreeFocus<CR>
nmap <silent> <leader>n  :NERDTreeFind<CR>
function! g:WorkaroundNERDTreeToggle()
  try | NERDTreeToggle | catch | silent! NERDTree | endtry
endfunction
" Disable arrow switch buffer when on netrw
augroup disable_buffer_change_mapping_for_nerdtree
  autocmd!
  autocmd filetype nerdtree* call Disable_arrow_mapping()
  autocmd filetype qf* call Disable_arrow_mapping()
  autocmd filetype nerdtree* set signcolumn=no
augroup END
function! Disable_arrow_mapping()
  noremap <buffer> <left> <nop>
  noremap <buffer> <right> <nop>
endfunction
let NERDTreeIgnore = ['node_modules', 'dist', 'build', 'coverage', 'package-lock.json', '.DS_Store', '^out', '^Icon']

" Tmux-Navigator
let g:tmux_navigator_disable_when_zoomed = 1
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>

" html-indent
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_autotags = "th,td,tr,tfoot,thead"
let g:html_indent_script1 = "auto"
let g:html_indent_style1 = "inc"

" javascript-indent
let g:SimpleJsIndenter_BriefMode = 1

" vim-indent-guide
let g:indentLine_char = '┆'
let g:indentLine_fileTypeExclude = ['nerdtree']
let g:indentLine_bufNameExclude = ['_.*', 'NERD_tree.*']
let g:indentLine_concealcursor=''
let g:indentLine_noConcealCursor = 'yes'

" fugitive
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gb :Gblame<CR>

" Goyo
let g:goyo_width=100
let g:goyo_height="75%"
function! s:goyo_enter()
  silent ! tmux set status off
  silent ! tmux resize-pane -Z
  set wrap
  set linebreak
	set tabline=0
endfunction

function! s:goyo_leave()
  silent ! tmux set status on
  silent ! tmux resize-pane -Z
  set nowrap
  set nolinebreak
	call buftabline#update(0)
endfunction

autocmd User GoyoEnter call <SID>goyo_enter()
autocmd User GoyoLeave call <SID>goyo_leave()

" == Shougo/deoplete.nvim ==
  " == carlitux/deoplete-ternjs ==
  let g:deoplete#enable_at_startup = 1
  let g:SuperTabDefaultCompletionType = "<CR>"
  "let g:deoplete#sources#flow#flow_bin = g:flow_path
  let g:tern_request_timeout = 1
  let g:tern_show_signature_in_pum = 0
  set completeopt-=preview

  " == neomake/neomake ==
  "let g:neomake_warning_sign = {
  "\ 'text': 'W',
  "\ 'texthl': 'WarningMsg',
  "\ }
  "let g:neomake_error_sign = {
  "\ 'text': 'E',
  "\ 'texthl': 'ErrorMsg',
  "\ }
  "let g:neomake_javascript_enabled_makers = ['eslint']
  "let g:neomake_jsx_enabled_makers = ['eslint']

  "let g:neomake_javascript_flow_exe = g:flow_path
  "let g:neomake_jsx_flow_exe = g:flow_path

  "autocmd! BufWritePost * if exists(":Neomake") | Neomake | endif

" lighline
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo'], ['percent'], [ 'fileformat', 'fileencoding', 'filetype',  ] ]
      \ },
      \ 'inactive': {
      \   'left': [ ['mode'], [ 'filename'] ],
      \   'right': [ ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightLineFugitive',
      \   'filename': 'LightLineFilename',
      \   'fileformat': 'LightLineFileformat',
      \   'filetype': 'LightLineFiletype',
      \   'fileencoding': 'LightLineFileencoding',
      \   'mode': 'LightLineMode',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ }

function! LightLineModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help' && &readonly ? '!!' : ''
endfunction

function! LightLineFilename()
  let fname = @%
  if fnamemodify( fname, ':t:r') =~ "index" 
    return ('' != LightLineModified() ? LightLineModified() . ' ' : '') .
      \ fnamemodify(fnamemodify(fname, ':p:h'), ':t') . "/" . fnamemodify(fname, ':t')
  endif
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname =~ 'NERD_tree' ? '' :
        \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != LightLineModified() ? LightLineModified() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]')
endfunction

function! LightLineFugitive()
  try
    if expand('%:t') !~? 'NERD' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  let fname = expand('%:t')
  return fname == 'ControlP' ? 'CtrlP' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ lightline#mode()
endfunction

let g:lightline.mode_map = {
		    \ 'n' : 'N',
		    \ 'i' : 'I',
		    \ 'R' : 'R',
		    \ 'v' : 'V',
		    \ '?': '      ' }

" buffertabline
let g:buftabline_separators="|"
let g:buftabline_indicators=1
let g:buftabline_modifier="✺"

" Vim-Search-Pulse
"
let g:vim_search_pulse_mode = 'cursor_line'
let g:vim_search_pulse_duration = 333

" FZF
nnoremap <silent> <C-p> :FZF<cr>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }
let g:fzf_layout = { 'down': '~30%' }

" Allow to select all entry from :Ag to quickfix with alt-a
let $FZF_DEFAULT_OPTS = '--bind æ:select-all -i'

function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

autocmd! FileType fzf
autocmd  FileType fzf set norelativenumber | set  signcolumn=no
  \| autocmd BufLeave <buffer> set relativenumber | set  signcolumn=yes

syntax sync fromstart

" QuickFixToggle
nmap <leader>q <Plug>window:quickfix:toggle<Esc>

" Coc and JS
let g:coc_global_extensions = ['coc-tsserver']
if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
  let g:coc_global_extensions += ['coc-prettier']
endif

"let g:prettier#autoformat = 1

if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
  let g:coc_global_extensions += ['coc-eslint']
endif

"command! -nargs=0 Prettier :CocCommand prettier.formatFile

" Polyglot : markdown
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_fenced_languages = ['nginx=nginx', 'jsx=javascript', 'js=javascript', 'c++=cpp', 'viml=vim', 'bash=sh', 'ini=dosini']

" always display left sign column on JS project
autocmd FileType javascript,react,typescriptreact,typescript,vue set signcolumn=yes

nmap <silent> <leader>< <Plug>(coc-diagnostic-prev)
nmap <silent> <leader>> <Plug>(coc-diagnostic-next)

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gr <Plug>(coc-references)

" Remap keys for applying codeAction to the current line.
"nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
"nmap <leader>qf  <Plug>(coc-fix-current)

autocmd ColorScheme * 
  \ hi CocErrorSign  ctermfg=Red guifg=#ff0000 | 
  \ hi CocWarningSign  ctermfg=Brown guifg=#ff922b |
  \ hi CocInfoSign  ctermfg=Yellow guifg=#fab005 |
  \ hi CocHintSign  ctermfg=Blue guifg=#15aabf |
  \ hi CocUnderline  cterm=underline gui=underline

" Enable multiple comments style for Vue SFC
let g:ft = ''
function! NERDCommenter_before()
  if &ft == 'vue'
    let g:ft = 'vue'
    let stack = synstack(line('.'), col('.'))
    if len(stack) > 0
      let syn = synIDattr((stack)[0], 'name')
      if len(syn) > 0
        exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
      endif
    endif
  endif
endfunction
function! NERDCommenter_after()
  if g:ft == 'vue'
    setf vue
    let g:ft = ''
  endif
endfunction

" Vue configuration
let g:vim_vue_plugin_config = { 
      \'syntax': {
      \   'template': ['html'],
      \   'script': ['javascript'],
      \   'style': ['scss'],
      \},
      \'full_syntax': [],
      \'initial_indent': [],
      \'attribute': 0,
      \'keyword': 0,
      \'foldexpr': 0,
      \'debug': 0,
      \}


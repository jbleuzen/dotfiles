" ----------------------------------------------------------------------------
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
" ----------------------------------------------------------------------------
set nocompatible

" ----------------------------------------------------------------------------
"  Vundle configuration
" ----------------------------------------------------------------------------
call plug#begin('~/.vim/plugins')
source ~/.dotfiles/vim/plugins
call plug#end()

delc PlugUpgrade

" Strip whitespace on save
"autocmd BufWritePre * :%s/\s\+$//e


" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set background=dark
set t_Co=256
syntax on
colorscheme molokai


set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
set lazyredraw             " turn off lazy redraw
set number                 " line numbers
set relativenumber         " Show relative numbers in col
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set cmdheight=1            " command line height
set backspace=2            " allow backspacing over everything in insert mode
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
set guicursor=a:blinkon0   " disable blinking cursor
set nowrap
set display=lastline	     " prevent the @ when lines are too long
set tabstop=2			         " Tabs width
set smartindent
set shiftwidth=2
set expandtab
set synmaxcol=0
set splitbelow				    " Open splits below
set splitright				    " Open splits on the right
set nofoldenable			    " Disable automatic fold
set hidden                " Can change buffer without save everytime
set autoindent            " Indent on new line

augroup qf
  autocmd!
  autocmd FileType qf set nobuflisted
  autocmd FileType vundle set nobuflisted
augroup END

" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set hlsearch               " don't highlight searches
set visualbell             " shut the fuck up
set cursorline				     " highlight current line
set laststatus=2           " Always display the statusline in all windows
set noshowmode             " Hide the default mode text (e.g. -- INSERT -- below the statusline)

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬
set fillchars+=vert:│

" --
"  Find
"  --
set path=.,/usr/include,,**
set suffixesadd=.js,.php

" ----------------------------------------------------------------------------
" Mappings
" ----------------------------------------------------------------------------

" Configure <Leader>
let mapleader = ","

" Escape is too far away
inoremap jj <Esc>
inoremap jk <Esc>
inoremap kj <Esc>
inoremap kk <Esc>

" Remap down/up for wrapping lines
nnoremap j gj
nnoremap k gk
xnoremap j gj
xnoremap k gk

" Learn "hkjl" the hard way !
nnoremap <Up>       <nop>
nnoremap <Down>     <nop>
nnoremap <silent>   <Left>  :bprevious<CR>
nnoremap <silent>   <Right> :bnext<CR>
inoremap <Up>       <nop>
inoremap <Down>     <nop>
inoremap <Left>     <Esc>:bprevious<CR>
inoremap <Right>    <Esc>:bnext<CR>

function! MapF1()
  if &buftype == "help"
    exec 'quit'
  else
    exec 'help'
  endif
endfunction

" Disabling <F1> because it's so close to <Esc>
inoremap <F1> <Esc>
noremap <F1> :call MapF1()<CR>

" Source vim config
nmap <F5> :so ~/.vimrc<CR>

" Toggle paste mode
set pastetoggle=<F12>
nmap <silent> <F12> :set paste!<BAR>:set paste?<CR>

" Easy create empty line
nmap <leader>o o<esc>
nmap <leader>O O<esc>

" Easy insert
nmap <leader>a ea
nmap <leader>i bi

" toggle `set list`
nmap <leader>l :set list!<CR>

" empty last search highlight
nmap <leader>/ :let @/ = ""<CR>

" toggle search result highlight
nmap <leader>; :set hlsearch!<CR>

" Insert ; at the end of the line if ; inserted then enter pressed
inoremap ;<CR> <C-o>A;

nmap <leader>gs :Gstatus<CR>
nmap <leader>gl :Glog<CR>

nmap <leader>z :Goyo<CR>

" close buffer
nmap <leader>w :Bdelete!<CR>
nmap <leader>< :Bdelete!<CR>
"close all buffers except current one
nmap  <leader>wa :Bonly<CR>
" new buffer
nmap <leader>n :enew<CR>

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" ----------------------------------------------------------------------------
" Backups
" ----------------------------------------------------------------------------

set nobackup
set nowb
set noswapfile


" ----------------------------------------------------------------------------
" Terminal
" ----------------------------------------------------------------------------

set mouse=a         		" enable mouse support in console "
set ttyfast					" Send more characters for redraws
" Set this to the name of your terminal that supports mouse codes.
" Must be one of: xterm, xterm2, netterm, dec, jsbterm, pterm
if !has('nvim')
  set ttymouse=xterm2
endif


" ----------------------------------------------------------------------------
" MacVim
" ----------------------------------------------------------------------------

if has("gui_macvim")
  let macvim_hig_shift_movement = 1 "allow selection in insert mode
endif


" ----------------------------------------------------------------------------
" FileType configuration
" ----------------------------------------------------------------------------
au BufNewFile,BufRead *.sass set tabstop=4 shiftwidth=4 expandtab
au BufNewFile,BufRead *.json setfiletype json syntax=javascript

au BufRead,BufNewFile /etc/nginx/conf/*                      set ft=nginx
au BufRead,BufNewFile /etc/nginx/sites-available/*           set ft=nginx
au BufRead,BufNewFile /usr/local/etc/nginx/sites-available/* set ft=nginx
au BufRead,BufNewFile vhost.nginx                            set ft=nginx

au BufRead,BufNewFile Vagrantfile							 set ft=ruby

au BufRead,BufNewFile *.mustache							 set ft=html

"au BufRead,BufNewFile *.twig                   set ft=jinja

" Force markdown filteype
au BufRead,BufNewFile *.md                     set ft=markdown
au BufRead,BufNewFile *.markdown               set ft=markdown

" ----------------------------------------------------------------------------
" Plugins configuration
" ----------------------------------------------------------------------------

" Emmet
let g:user_emmet_leader_key = '<c-e>'
let g:use_emmet_complete_tag = 1

" NERDTree
let NERDTreeMinimalUI=1
let NERDTreeCaseSensitiveSort=1
let g:NERDTreeMapJumpNextSibling = '<Nop>'
let g:NERDTreeMapJumpPrevSibling = '<Nop>'
nmap <silent> <Leader>d :call g:WorkaroundNERDTreeToggle()<CR>
nmap <silent> <leader>D  :NERDTreeFocus<CR>
nmap <silent> <leader>n  :NERDTreeFind<CR>
function! g:WorkaroundNERDTreeToggle()
  try | NERDTreeToggle | catch | silent! NERDTree | endtry
endfunction
" Disable arrow switch buffer when on netrw
augroup disable_buffer_change_mapping_for_nerdtree
  autocmd!
  autocmd filetype nerdtree* call Disable_arrow_mapping()
  autocmd filetype qf* call Disable_arrow_mapping()
augroup END
function! Disable_arrow_mapping()
  noremap <buffer> <left> <nop>
  noremap <buffer> <right> <nop>
endfunction

" Tmux-Navigator
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>


" Airline
let g:airline_theme = 'powerlineish'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_detect_modified=0
let g:airline_powerline_fonts = 0
let g:airline#extensions#tabline#enabled = 1 " Enable the list of buffers
let g:airline#extensions#tabline#show_tabs = 1 
let g:airline#extensions#tabline#fnamemod = ':t' " Show just the filename
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#fnamecollapse = 0
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#ctrlp#show_adjacent_modes = 0
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.paste = 'P'
let g:airline_mode_map = {
      \ '__' : ' - ',
      \ 'n'  : ' N ',
      \ 'i'  : ' I ',
      \ 'R'  : ' R ',
      \ 'c'  : ' C ',
      \ 'v'  : ' V ',
      \ 'V'  : ' V ',
      \ 's'  : ' S ',
      \ 'S'  : ' S ',
      \ }
let g:airline#extensions#default#layout = [
      \ [ 'a', 'b', 'c' ],
      \ [ 'x', 'warning' ]
      \ ]

" CTRLP
let g:ctrlp_custom_ignore = '\v[\/](\.git|node_modules|\.*|_site|\.png|\.jpg|\.gif|\.ico)$'
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_match_window_reversed = 1
let g:ctrlp_max_height = 5

" html-indent
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_autotags = "th,td,tr,tfoot,thead"
let g:html_indent_script1 = "auto"
let g:html_indent_style1 = "inc"

" javascript-indent
let g:SimpleJsIndenter_BriefMode = 1

" vim-indent-guide
let g:indentLine_char = '┆'
let g:indentLine_fileTypeExclude = ['nerdtree']
let g:indentLine_bufNameExclude = ['_.*', 'NERD_tree.*']
let g:indentLine_concealcursor=''
let g:indentLine_noConcealCursor = 'yes'

" fugitive
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gb :Gblame<CR>

" Goyo
let g:goyo_width=100
let g:goyo_height="75%"
function! s:goyo_enter()
  silent ! tmux set status off
  silent ! osascript -e 'repeat 2 times' -e 'tell application "System Events" to keystroke "+" using command down' -e 'end repeat'
  set wrap
  set linebreak
  let b:quitting = 0
  let b:quitting_bang = 0
	set tabline=0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction

function! s:goyo_leave()
  silent ! tmux set status on
  silent ! osascript -e 'tell application "System Events" to keystroke "0" using command down'
  set nowrap
  set nolinebreak
	call buftabline#update(0)
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
endfunction

autocmd User GoyoEnter call <SID>goyo_enter()
autocmd User GoyoLeave call <SID>goyo_leave()

" lighline
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo'], ['percent'], [ 'fileformat', 'fileencoding', 'filetype',  ] ]
      \ },
      \ 'inactive': {
      \   'left': [ ['mode'], [ 'filename'] ],
      \   'right': [ ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightLineFugitive',
      \   'filename': 'LightLineFilename',
      \   'fileformat': 'LightLineFileformat',
      \   'filetype': 'LightLineFiletype',
      \   'fileencoding': 'LightLineFileencoding',
      \   'mode': 'LightLineMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ }

function! LightLineModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help' && &readonly ? '!!' : ''
endfunction

function! LightLineFilename()
  let fname = @%
  if fnamemodify( fname, ':t:r') =~ "index" 
    return ('' != LightLineModified() ? LightLineModified() . ' ' : '') .
      \ fnamemodify(fnamemodify(fname, ':p:h'), ':t') . "/" . fnamemodify(fname, ':t')
  endif
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname =~ 'NERD_tree' ? '' :
        \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != LightLineModified() ? LightLineModified() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]')
endfunction

function! LightLineFugitive()
  try
    if expand('%:t') !~? 'NERD' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  let fname = expand('%:t')
  return fname == 'ControlP' ? 'CtrlP' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ lightline#mode()
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:lightline.mode_map = {
		    \ 'n' : 'N',
		    \ 'i' : 'I',
		    \ 'R' : 'R',
		    \ 'v' : 'V',
		    \ '?': '      ' }

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

" buffertabline
let g:buftabline_separators="|"

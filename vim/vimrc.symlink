" ----------------------------------------------------------------------------
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
" ----------------------------------------------------------------------------
set nocompatible

" ----------------------------------------------------------------------------
"  Vundle configuration
" ----------------------------------------------------------------------------

filetype off 			" disable detection before vundle loads
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

source ~/.dotfiles/vim/bundles
filetype plugin indent on       " enable detection, plugins and indenting in one step

" Strip whitespace on save
"autocmd BufWritePre * :%s/\s\+$//e


" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set background=dark
set t_Co=256
syntax on
colorscheme molokai

set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=1                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
set guicursor=a:blinkon0   " disable blinking cursor
set cpoptions+=n	   " wrap long lines
set display=lastline	   " prevent the @ when lines are too long
set tabstop=4			" Tabs width
set smartindent
set shiftwidth=4
set noexpandtab
set synmaxcol=0
if has("gui_running")
	set showbreak=\ \ ↳\
else
	set showbreak=\ \ \ ↳\
endif
set splitbelow				" Display preview window in the bottom


" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set statusline=%<\ %F\ %m%r%y%=%-35.(line:\ %l\ /\ %L,\ col:\ %c%V\ (%P)%)
set ignorecase             " ignore case when searching
set hlsearch               " don't highlight searches
set visualbell             " shut the fuck up
set cursorline				" highlight current line

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬
" ----------------------------------------------------------------------------
" Tweaks
" ----------------------------------------------------------------------------
" For reopening the file in root
cmap w!! w !sudo tee % >/dev/null 

" ----------------------------------------------------------------------------
" Mappings
" ----------------------------------------------------------------------------

" Configure <Leader>
let mapleader = ","

" Escape is too far away
inoremap jj <Esc>
" Learn "hkjl" the hard way !
nnoremap <Up> 		<nop>
nnoremap <Down>		<nop>
nnoremap <Left> 	<nop>
nnoremap <Right>	<nop>
inoremap <Up>     	<nop>
inoremap <Down>   	<nop>
inoremap <Left>   	<nop>
inoremap <Right>  	<nop>

" Moving line up/down (For french azerty Mac)
" Hackish mappings for ALT-J & ALT-K
noremap Ï :m+<CR>
noremap È :m-2<CR>
inoremap Ï <Esc>:m+<CR>
inoremap È <Esc>:m-2<CR>
vnoremap Ï :m'>+<CR>gv
vnoremap È :m-2<CR>gv

nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-l> :wincmd l<CR>

" Disabling <F1> because it's so close to <Esc>
inoremap <F1> <Esc>
noremap <F1> :call MapF1()<CR>

function! MapF1()
  if &buftype == "help"
    exec 'quit'
  else
    exec 'help'
  endif
endfunction

" Toggle paste mode
set pastetoggle=<F12>
nmap <silent> <F12> :set paste!<BAR>:set paste?<CR>

" Easy create empty line
nmap ,o o<esc>
nmap ,O O<esc>

" toggle `set list`
nmap <leader>l :set list!<CR>

" empty last search highlight
nmap <leader>/ :let @/ = ""<CR>

" toggle search result highlight
nmap <leader>; :set hlsearch!<CR>

inoremap ;<CR> <C-o>A;


" ----------------------------------------------------------------------------
" Backups
" ----------------------------------------------------------------------------

set nobackup
set nowb
set noswapfile


" ----------------------------------------------------------------------------
" Terminal
" ----------------------------------------------------------------------------

set mouse=a         		" enable mouse support in console "
set ttyfast					" Send more characters for redraws
" Set this to the name of your terminal that supports mouse codes.
" Must be one of: xterm, xterm2, netterm, dec, jsbterm, pterm
set ttymouse=xterm2


" ----------------------------------------------------------------------------
" MacVim
" ----------------------------------------------------------------------------

if has("gui_macvim")
	let macvim_hig_shift_movement = 1 "allow selection in insert mode
endif


" ----------------------------------------------------------------------------
" FileType configuration
" ----------------------------------------------------------------------------
au BufNewFile,BufRead *.sass set tabstop=4 shiftwidth=4 expandtab
au BufNewFile,BufRead *.json setfiletype json syntax=javascript

au BufRead,BufNewFile /etc/nginx/conf/*                      set ft=nginx
au BufRead,BufNewFile /etc/nginx/sites-available/*           set ft=nginx
au BufRead,BufNewFile /usr/local/etc/nginx/sites-available/* set ft=nginx
au BufRead,BufNewFile vhost.nginx                            set ft=nginx

" ----------------------------------------------------------------------------
" Plugins configuration
" ----------------------------------------------------------------------------

" ZenCoding
let g:user_zen_expandabbr_key = '<c-e>'
let g:use_zen_complete_tag = 1

" NERDTree
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeIgnore=['\.o$', '\~$', 'Icon', '_asset_bundler_cache$[[dir]]']
let g:NERDTreeWinSize = 30

" NERDTreeTabs
let g:nerdtree_tabs_open_on_gui_startup = 0 " Auto open nerd tree on startup on gvim
let g:nerdtree_tabs_focus_on_files = 1 " Focus in the main content window
nnoremap <leader>d :NERDTreeTabsToggle<cr>
if has("gui_macvim")
	nnoremap <D-D> :NERDTreeTabsToggle<cr>
endif

" Vim-Powerline
let g:Powerline_symbols = 'fancy'

" CTRLP
let g:ctrlp_custom_ignore = '\v[\/](\.git|\.hg|\.svn|_site|\.png|\.jpg|\.gif|\.ico)$'
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_match_window_reversed = 1
let g:ctrlp_max_height = 5

" html-indent
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_autotags = "th,td,tr,tfoot,thead"
let g:html_indent_script1 = "auto"
let g:html_indent_style1 = "inc"

" javascript-indent
let g:SimpleJsIndenter_BriefMode = 1

" vim-indent-guide
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1

" sessions
let g:session_autoload = 'no'
let g:session_autoload = "prompt"
let g:session_autosave = 'yes'
